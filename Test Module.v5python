{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ntop_motor = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\nbottom_motor = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)\nir_1 = Distance(Ports.PORT15)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n#define PID controller\nclass PIDController:\n    def __init__(self, kp, ki, kd, setpoint=0.0):\n        self.kp = kp  # Proportional gain\n        self.ki = ki  # Integral gain\n        self.kd = kd  # Derivative gain\n\n        self.prev_error = 0.0\n        self.integral = 0.0\n\n    def update(self, error, dt):\n        self.integral += error * dt\n        derivative = (error - self.prev_error) / dt if dt > 0 else 0.0\n\n        output = (\n            self.kp * error +\n            self.ki * self.integral +\n            self.kd * derivative\n        )\n\n        self.prev_error = error\n        return output\n\n# Define swerve class\nclass SwerveModule:\n    setpoint = [0,0]\n    motor_to_ring = 15/150\n    ring_to_wheel = 136/24\n    motor_split = [0.5, 0.5]\n\n    def __init__(self, t_motor, b_motor, ir, pid_values, start_dir = 0):\n        self.t_motor = t_motor\n        self.b_motor = b_motor\n        self.ir = ir\n        self.start_dir = start_dir\n\n        self.t_motor.spin(FORWARD)\n        self.b_motor.spin(FORWARD)\n        \n        self.t_motor.set_velocity(0)\n        self.b_motor.set_velocity(0)\n\n        self.t_motor.set_max_torque(100, PERCENT)\n        self.t_motor.set_max_torque(100, PERCENT)\n\n        self.pid = PIDController(*pid_values)\n\n    def Home(self):\n        thresh = 30\n        p1, p2 = [0,0], [0,0]\n        correction = 80 #IR seems to be slightly offset causing an off center Home\n        \n        #So the wheel doesn't start triggered\n        if self.ir.object_distance(MM) < thresh:\n            self.SetModule(0, (12.5/self.motor_split[1]))\n            while self.ir.object_distance(MM) < thresh:\n                wait(0.05, SECONDS)\n            wait(0.5, SECONDS)\n\n        #Get First pos\n        self.SetModule(0, -(12.5/self.motor_split[1]))\n\n        while self.ir.object_distance(MM) >= (thresh-2):\n            wait(0.05, SECONDS)\n        p1 = [self.t_motor.position(DEGREES), self.b_motor.position(DEGREES)]\n\n        #Get Second Pos\n        while self.ir.object_distance(MM) < thresh:\n            wait(0.05, SECONDS)\n        p2 = [self.t_motor.position(DEGREES), self.b_motor.position(DEGREES)]\n\n        #Move to midpoint\n        self.SetModule(0, (12.5/self.motor_split[1]))\n        self.t_motor.spin_to_position((p1[0]+p2[0])/2 + correction, DEGREES)\n        self.b_motor.spin_to_position((p1[1]+p2[1])/2 + correction, DEGREES)\n\n        #stop and zero\n        self.t_motor.spin(FORWARD)\n        self.b_motor.spin(FORWARD)\n        self.SetModule(0, 0)\n        wait(1, SECONDS)\n        self.t_motor.set_position(self.start_dir / self.motor_to_ring, DEGREES)\n        self.b_motor.set_position(self.start_dir / self.motor_to_ring, DEGREES)\n\n        brain.screen.print(\"Done Homing\")\n\n    def SetModule(self, moveSpeed, turnSpeed):\n        tSpeed = -self.motor_split[0]*moveSpeed + self.motor_split[1]*turnSpeed\n        bSpeed = self.motor_split[0]*moveSpeed + self.motor_split[1]*turnSpeed\n\n        #catch errors when attempting to set speed too high\n        if tSpeed > 100 or tSpeed < -100:\n            raise Exception(\"T Motor Speed Too High\")\n            return\n        if bSpeed > 100 or bSpeed < -100:\n            raise Exception(\"B Motor Speed Too High\")\n            return\n\n        #limit acceleration\n        maxAccel = 15000\n        tSpeed = min(self.t_motor.velocity(PERCENT)+maxAccel, tSpeed)\n        tSpeed = max(self.t_motor.velocity(PERCENT)-maxAccel, tSpeed)\n        bSpeed = min(self.b_motor.velocity(PERCENT)+maxAccel, bSpeed)\n        bSpeed = max(self.b_motor.velocity(PERCENT)-maxAccel, bSpeed)\n\n        self.t_motor.set_velocity(tSpeed, PERCENT)\n        self.b_motor.set_velocity(bSpeed, PERCENT)\n        \n    def WheelAngle(self):\n        return (0.5 * (self.t_motor.position(DEGREES) + self.b_motor.position(DEGREES)) * self.motor_to_ring)\n\n    def MoveToSetpoint(self, setpoint, dt):\n        move_speed = setpoint[0]\n\n        #calc turn speed\n        target_angle = setpoint[1]\n        current_angle = self.WheelAngle()%360 - 180\n        diff = target_angle - current_angle\n\n        #temp\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1,1)\n        brain.screen.print(target_angle)\n        brain.screen.set_cursor(2,1)\n        brain.screen.print(current_angle)\n        #end temp\n        \n        #Move the the shorter turn direction\n        if abs(diff) >= 180:\n            diff -= diff/abs(diff) * 360\n\n        #move to a position 180 off and flip direction\n        if abs(diff) >= 90:\n            diff -= diff/abs(diff) * 180\n            move_speed *= -1\n\n            brain.screen.set_cursor(3,1)\n            brain.screen.print(\"reversed\")\n\n        #Control Turn\n        turn_speed = min(100, max(-100, self.pid.update(diff, dt)))\n\n        self.SetModule(move_speed, turn_speed)\n\n\n\nmodule = SwerveModule(top_motor, bottom_motor, ir_1, pid_values = [4,0,0.2], start_dir = -0)\nmodule.Home()\n\nbrain.screen.clear_screen()\nbrain.screen.set_cursor(1,1)\nbrain.screen.print(module.WheelAngle())\nwait(0.5, SECONDS)\n\nt = 0\nwhile t <= 3:\n    module.MoveToSetpoint([25, 0], 0.05)\n    wait(0.05, SECONDS)\n    t += 0.05\n\n\nt = 0\nwhile t <= 2:\n    module.MoveToSetpoint([0, -45], 0.05)\n    wait(0.05, SECONDS)\n    t += 0.05\n","textLanguage":"python","robotConfig":[{"port":[11],"name":"top_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[20],"name":"bottom_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[15],"name":"ir_1","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}